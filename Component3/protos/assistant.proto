syntax = "proto3";

package assistant;

// Define the AI Assistant Service
service AIAssistant {
    rpc GeneratePRDescription
        (PRDescriptionRequest) 
        returns (PRDescriptionResponse);
    rpc SmartAutoComplete
        (SmartAutoCompleteRequest) 
        returns (SmartAutoCompleteResponse);
    rpc ChatGPT4Code
        (ChatGPT4CodeRequest) 
        returns (ChatGPT4CodeResponse);
    rpc VirtualPairProgramming
        (stream VirtualPairProgrammingRequest)
        returns (stream VirtualPairProgrammingResponse);
}

// Define a message for Change, used in many requests
message Change {
    string file_path = 1;
    string change_type = 2;
    string change_content = 3;
}

// Define a message for PR Description Request
message PRDescriptionRequest {
    string repository_url = 1;
    string source_branch = 2;
    repeated Change committed_changes = 3;
}

// Define a message for PR Description Response
message PRDescriptionResponse {
    string PR_description = 1;
}

// Define a message for Smart Auto Complete Request
message SmartAutoCompleteRequest {
    message CodeContext {
        string current_line = 1;
        string previous_lines = 2;
        string next_lines = 3;
    }
    string repository_url = 1;
    string branch_name = 2; //needed?
    repeated Change committed_changes = 3;
    repeated Change uncommitted_changes = 4;
    string recent_edits = 5;
    CodeContext code_context = 6;
    // ta, file or file path? check the data size grpc can process
    // best practices (ta prefers the whole file if input size allows)
}

// Define a message for Smart Auto Complete Response
message SmartAutoCompleteResponse {
    string completion_code = 1;
}

// Define a message for Chat GPT for Code Request
// all code in the repo
message ChatGPT4CodeRequest {
    string repository_url = 1;
    string branch_name = 2;
    repeated Change committed_changes = 3;
    repeated Change uncommitted_changes = 4; 
    string text_description = 5;
}

// Define a message for Chat GPT for Code Response
message ChatGPT4CodeResponse {
    string gpt_response = 1;
}

// Define a message for Virtual Pair Programming Request
message VirtualPairProgrammingRequest {
    string repository_url = 1;
    string branch_name = 2;
    repeated Change uncommitted_changes = 3;
    string text_description = 4;
    // string stack_trace = 6; // make it part of the description
    //stack_trace in stderr, which not always exsits
}

// Define a message for Virtual Pair Programming Response
message VirtualPairProgrammingResponse {
    message CodePointer {
        Change delta_code = 1;
        string text_description = 2;
    }
    repeated CodePointer code_pointer = 1;
}