# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import assistant_pb2 as assistant__pb2


class AIAssistantStub(object):
    """Define the AI Assistant Service
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GeneratePRDescription = channel.unary_unary(
                '/assistant.AIAssistant/GeneratePRDescription',
                request_serializer=assistant__pb2.PRDescriptionRequest.SerializeToString,
                response_deserializer=assistant__pb2.PRDescriptionResponse.FromString,
                )
        self.SmartAutoComplete = channel.unary_unary(
                '/assistant.AIAssistant/SmartAutoComplete',
                request_serializer=assistant__pb2.SmartAutoCompleteRequest.SerializeToString,
                response_deserializer=assistant__pb2.SmartAutoCompleteResponse.FromString,
                )
        self.ChatGPT4Code = channel.unary_unary(
                '/assistant.AIAssistant/ChatGPT4Code',
                request_serializer=assistant__pb2.ChatGPT4CodeRequest.SerializeToString,
                response_deserializer=assistant__pb2.ChatGPT4CodeResponse.FromString,
                )
        self.VirtualPairProgramming = channel.stream_stream(
                '/assistant.AIAssistant/VirtualPairProgramming',
                request_serializer=assistant__pb2.VirtualPairProgrammingRequest.SerializeToString,
                response_deserializer=assistant__pb2.VirtualPairProgrammingResponse.FromString,
                )


class AIAssistantServicer(object):
    """Define the AI Assistant Service
    """

    def GeneratePRDescription(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SmartAutoComplete(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ChatGPT4Code(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def VirtualPairProgramming(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AIAssistantServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GeneratePRDescription': grpc.unary_unary_rpc_method_handler(
                    servicer.GeneratePRDescription,
                    request_deserializer=assistant__pb2.PRDescriptionRequest.FromString,
                    response_serializer=assistant__pb2.PRDescriptionResponse.SerializeToString,
            ),
            'SmartAutoComplete': grpc.unary_unary_rpc_method_handler(
                    servicer.SmartAutoComplete,
                    request_deserializer=assistant__pb2.SmartAutoCompleteRequest.FromString,
                    response_serializer=assistant__pb2.SmartAutoCompleteResponse.SerializeToString,
            ),
            'ChatGPT4Code': grpc.unary_unary_rpc_method_handler(
                    servicer.ChatGPT4Code,
                    request_deserializer=assistant__pb2.ChatGPT4CodeRequest.FromString,
                    response_serializer=assistant__pb2.ChatGPT4CodeResponse.SerializeToString,
            ),
            'VirtualPairProgramming': grpc.stream_stream_rpc_method_handler(
                    servicer.VirtualPairProgramming,
                    request_deserializer=assistant__pb2.VirtualPairProgrammingRequest.FromString,
                    response_serializer=assistant__pb2.VirtualPairProgrammingResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'assistant.AIAssistant', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class AIAssistant(object):
    """Define the AI Assistant Service
    """

    @staticmethod
    def GeneratePRDescription(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/assistant.AIAssistant/GeneratePRDescription',
            assistant__pb2.PRDescriptionRequest.SerializeToString,
            assistant__pb2.PRDescriptionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SmartAutoComplete(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/assistant.AIAssistant/SmartAutoComplete',
            assistant__pb2.SmartAutoCompleteRequest.SerializeToString,
            assistant__pb2.SmartAutoCompleteResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ChatGPT4Code(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/assistant.AIAssistant/ChatGPT4Code',
            assistant__pb2.ChatGPT4CodeRequest.SerializeToString,
            assistant__pb2.ChatGPT4CodeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def VirtualPairProgramming(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/assistant.AIAssistant/VirtualPairProgramming',
            assistant__pb2.VirtualPairProgrammingRequest.SerializeToString,
            assistant__pb2.VirtualPairProgrammingResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
